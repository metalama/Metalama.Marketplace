<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<AspectLibrary>
    <Name>Metalama.Patterns.Caching.Aspects</Name>
    <Kind>Package</Kind>
    <Categories>
        <Category>Caching</Category>
    </Categories>
    <Author>PostSharp Technologies</Author>
    <Quality>PostSharp</Quality>
    <License>MIT</License>
    <SourceUrl>https://github.com/postsharp/Metalama.Patterns</SourceUrl>
    <DocumentationUrl>https://doc.metalama.net/</DocumentationUrl>
    <Summary>
<![CDATA[
<p>
    Caching is a great way to improve the latency an application.
    Traditionally, when you implement caching, you need to play with the API of the caching framework
    (such as <a href="https://learn.microsoft.com/dotnet/api/system.runtime.caching.memorycache>MemoryCache</a>)
    or caching server (such as <a href="https://redis.io/">Redis</a>) and to include moderately complex logic
    to your source code to generate the cache key, check the existence of the item in the cache,
    and add the item into the cache.
    Another source of complexity stems from removing items from the cache when the source data is updated.
    Implementing caching manually is not only time-consuming, but also is error-prone:
    It is easy to generate inconsistent cache keys between read and update methods.
</p>
<p>
    Metalama Caching allows you to dramatically reduce the complexity of caching.
    It allows you to cache the return value of a method as a function of its arguments with just a custom attribute,
    namely the CacheAttribute aspect. The InvalidateCacheAttribute aspect and the CachingServices.Invalidation API
    offer a strongly-typed way to invalidate cached methods.
    Additionally,Metalama Caching is independent from the caching framework or server (called caching backend),
    so you can choose from several backends or implement an adapter for your own backend.
</p>
]]>
    </Summary>
    <Keywords>
        <Keyword>cache</Keyword>
        <Keyword>cache invalidation</Keyword>
        <Keyword>cache dependencies</Keyword>
    </Keywords>
    <Aspects>
        <Aspect>
            <Name>CacheAttribute</Name>
            <DocumentationUrl>https://doc.metalama.net/</DocumentationUrl>
            <Description>
<![CDATA[
Custom attribute that, when applied on a method, causes the return value of the method to be cached for the specific list of arguments passed to this method call.
]]>
            </Description>
        </Aspect>
        <Aspect>
            <Name>InvalidateCacheAttribute</Name>
            <DocumentationUrl>https://doc.metalama.net/</DocumentationUrl>
            <Description>
<![CDATA[
Custom attribute that, when applied on a method, causes an invocation of this method to remove from the cache the result of invocations of other given methods with the same parameter values.
]]>
            </Description>
        </Aspect>
    </Aspects>
</AspectLibrary>